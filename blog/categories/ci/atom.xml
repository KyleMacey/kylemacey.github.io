<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ci, | Kyle Macey]]></title>
  <link href="http://kylemacey.github.io/blog/categories/ci/atom.xml" rel="self"/>
  <link href="http://kylemacey.github.io/"/>
  <updated>2015-03-04T21:37:40-05:00</updated>
  <id>http://kylemacey.github.io/</id>
  <author>
    <name><![CDATA[Kyle Macey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Oh, Ship!]]></title>
    <link href="http://kylemacey.github.io/blog/2015/03/04/oh-ship/"/>
    <updated>2015-03-04T17:32:20-05:00</updated>
    <id>http://kylemacey.github.io/blog/2015/03/04/oh-ship</id>
    <content type="html"><![CDATA[<h3>Don&rsquo;t forget to back up your SSH keys.</h3>

<p>That&rsquo;s what I learned this week. After having some OS issues on my laptop, I backed up my home folder and installed Fedora on my machine where Ubuntu once stood. I tried to be clever and only back up certain directories, figuring I didn&rsquo;t need the rest. It turns out that I completely skipped past backing up <code>~/.ssh</code>.</p>

<p>What&rsquo;s the worst that can happen? In most instances, you can upload new public keys to work with fresh ssh credentials. That&rsquo;s exactly what I did for GitHub, Bitbucket, and everything else I could think of. However, this left my Jenkins server, which was running on an EC2 instance, completely inaccessible, since one does not simply generate a new keypair for an EC2 instance. This wouldn&rsquo;t be the worst news in the world if it weren&rsquo;t for the fact that just today, the instance ran out of disk space. Artifacts from past builds piled up and brought poor Jenkins to a halt. I tried my damndest to install plugins to clean the workspaces, but it was too late. Jenkins was dead.</p>

<p>What were my options? I could try to clone the EC2 instance and generate a new keypair. I could build a new instance from scratch and try to copy configuration. I could go back in time and convince myself that it&rsquo;s a good idea to regularly back up your CI server. All of these were possibilities. However, I wanted to take advantage of my misfortune and make something good from it.</p>

<h3>All is not lost</h3>

<p>I had recently heard an advertisement for <a href="https://codeship.com/">Codeship</a>. Although I know there are plenty of hosted build server solutions out there, Codeship was fresh in my mind. I paid their site a visit and was instantly drawn in by their ParallelCI feature. It allows you to split your test suite into multiple simultaneous jobs using their intuitive web interface. I had always meant to set this up with Jenkins, but had never gotten around to it.</p>

<p>I started with the free tier Codeship account. I pushed a new change to GitHub and waited while my new friends ran my test suite.</p>

<p>Failure. At least 20 tests. All of which depended on factors that I had custom-configured into Jenkins: custom DNS resolvers, private APIs and weird remote databases. All failing due to what I thought made my test suite special. I was actually pretty pleased by this. After a couple hours, I refactored my tests in a new branch. I rewrote them so that they would make sense to run on any machine without any special setup. By the end, I felt like I had actually improved the usefulness of my tests by making expectations that mattered, rather than ones that made me feel <em>special</em>. I pushed my branch to GitHub and waited again.</p>

<p>Success! I was conveniently notified in our company Slack room that everything was going to be okay. All I had left to do was copy our custom deployment script into Codeship (though they offer deployment integrations with several services using the web interface) and I was shipping again! I even broke my tests up into two pipes and halved my testing time. All was going swimmingly.</p>

<p>Codeship&rsquo;s responsive customer support was able to help me get a few more bits of our workflow operating using their interface, and Jenkins was replaced in a single day. And at $49/month, it&rsquo;s not much more expensive than paying for a medium EC2 instance.</p>

<h3>The moral of the story</h3>

<p>I&rsquo;ve always loved to tinker with things. I think that&rsquo;s why I was drawn toward Jenkins in the first place. The customizability and power was magnificent. However, you reach a point sometimes when work just needs to get <strong>done</strong>. I was glad to be up and operational again so quickly, and can now focus on the fun part: writing code!</p>
]]></content>
  </entry>
  
</feed>
